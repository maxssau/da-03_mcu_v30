;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : DA-03s v2.0 FW v1.00
;Version : 1.00
;Date    : 31.10.2018
;Author  : Maximov Evgeny
;Company : L & Z Audio
;Comments:
;
;
;Chip type               : ATmega48PA
;AVR Core Clock frequency: 1,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*******************************************************/
;
;void Write_To_DAC (unsigned char,unsigned char,unsigned char);
;void SampleRateCheck(unsigned char);
;void ResetChip();
;void DF_Check();
;char getchar(void);
;void putchar(char);
;
;#include <mega48pa.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;
;unsigned char dac_reg[22];
;
;//unsigned char _4490_dac_reg[10];
;//unsigned char _4493_dac_reg[22];
;
;flash unsigned char _4490_def_values[]={0x87,0xA,0,0,0,0,130,0,0,0,0,0,0,0,0};
;flash unsigned char _4493_def_values[]={143,2,0,255,255,64,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
;
;_Bool StartUp=0;
;unsigned char i2c_address=0;
;
;//_Bool _4493_mode; // hardware define
;//_Bool Scale;      // hardware define
;
;// logick vars
;unsigned char last_SR=0;
;unsigned char last_DF=0;
;
;// GPIO Defines
;#define F0 PIND.3
;#define F1 PIND.2
;#define F2 PINC.3
;#define F3 PINC.2
;#define DSD PIND.6
;#define Scale PIND.3
;#define _4493 PIND.4
;#define DAC_reset PORTB.2
;#define Mute PINB.6
;#define SSLOW PIND.7
;#define SD PINB.0
;#define SLOW PINB.1
;#define Scale_44 PORTC.0
;#define Scale_48 PORTC.1
;
;_Bool _getbit(unsigned char data,unsigned char pos)
; 0000 0046 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0047     if((1<<pos)&data)
;PCODE: $0000000F VOL: 0
;	data -> Y+1
;	pos -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0048     {
; 0000 0049         return 1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 004A     }
; 0000 004B     else
;PCODE: $0000001C VOL: 0
; 0000 004C     {
; 0000 004D         return 0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 004E     }
;PCODE: $00000020 VOL: 0
; 0000 004F }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;unsigned char _setbit(unsigned char data, unsigned char pos)
; 0000 0052 {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0053     return (data | (1<<pos));
;PCODE: $00000026 VOL: 0
;	data -> Y+1
;	pos -> Y+0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0054 }
;PCODE: $0000002E VOL: 0
;
;unsigned char _clrbit(unsigned char data, unsigned char pos)
; 0000 0057 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0058     return (data & ~(1<<pos));
;PCODE: $00000031 VOL: 0
;	data -> Y+1
;	pos -> Y+0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0059 }
;PCODE: $0000003A VOL: 0
;
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0077 {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0078 char status,data;
; 0000 0079 status=UCSR0A;
;PCODE: $0000003D VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 007A data=UDR0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 007B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 007C    {
; 0000 007D    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007E #if RX_BUFFER_SIZE0 == 256
; 0000 007F    // special case for receiver buffer size=256
; 0000 0080    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0081 #else
; 0000 0082    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0083    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0084       {
; 0000 0085       rx_counter0=0;
;PCODE: $00000053 VOL: 0
; 0000 0086       rx_buffer_overflow0=1;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0087       }
; 0000 0088 #endif
; 0000 0089 
; 0000 008A 
; 0000 008B     if(rx_counter0==2)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 008C     {
; 0000 008D         //receive 3 bytes
; 0000 008E         switch(rx_buffer0[0])
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008F         {
; 0000 0090             case 1:
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0091             {
; 0000 0092                 //write to reg
; 0000 0093                 if(_4493)
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0094                 {
; 0000 0095                     if(rx_buffer0[1]<22) //check overflow
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0096                     {
; 0000 0097                         dac_reg[rx_buffer0[1]]=rx_buffer0[2];
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0098                     }
; 0000 0099                 }
;PCODE: $0000006C VOL: 0
; 0000 009A                 else
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 009B                 {
; 0000 009C                     if(rx_buffer0[1]<10) //check overflow
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009D                     {
; 0000 009E                         dac_reg[rx_buffer0[1]]=rx_buffer0[2];
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 009F                     }
; 0000 00A0                 }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00A1 
; 0000 00A2             }
; 0000 00A3             break;
;PCODE: $0000007C VOL: 0
; 0000 00A4             case 2:
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00A5             {
; 0000 00A6                 putchar('@');
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00A7                 putchar(dac_reg[rx_buffer0[1]]);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A8             }
; 0000 00A9             break;
;PCODE: $00000088 VOL: 0
; 0000 00AA 
; 0000 00AB         }
;PCODE: $00000089 VOL: 0
; 0000 00AC         rx_counter0=0; //flush buffer
;PCODE: $0000008A VOL: 0
; 0000 00AD     }
; 0000 00AE    }
;PCODE: $0000008B VOL: 0
; 0000 00AF }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 00B6 {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00B7 char data;
; 0000 00B8 while (rx_counter0==0);
;PCODE: $00000093 VOL: 0
;	data -> R17
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B9 data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00BA #if RX_BUFFER_SIZE0 != 256
; 0000 00BB if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00BC #endif
; 0000 00BD #asm("cli")
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
	cli
;PCODE: $000000A4 VOL: 0
; 0000 00BE --rx_counter0;
;PCODE: $000000A5 VOL: 0
; 0000 00BF #asm("sei")
;PCODE: $000000A6 VOL: 0
	sei
;PCODE: $000000A7 VOL: 0
; 0000 00C0 return data;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C1 }
;PCODE: $000000AB VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0=0,tx_rd_index0=0;
;#else
;unsigned int tx_wr_index0=0,tx_rd_index0=0;
;#endif
;
;#if TX_BUFFER_SIZE0 < 256
;unsigned char tx_counter0=0;
;#else
;unsigned int tx_counter0=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 00D7 {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00D8 if (tx_counter0)
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00D9    {
; 0000 00DA    --tx_counter0;
;PCODE: $000000B0 VOL: 0
; 0000 00DB    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00DC #if TX_BUFFER_SIZE0 != 256
; 0000 00DD    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00DE #endif
; 0000 00DF    }
;PCODE: $000000BB VOL: 0
; 0000 00E0 }
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00E7 {
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00E8 while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $000000C2 VOL: 0
;	c -> Y+0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00E9 #asm("cli")
;PCODE: $000000C9 VOL: 0
	cli
;PCODE: $000000CA VOL: 0
; 0000 00EA if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00EB    {
; 0000 00EC    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00ED #if TX_BUFFER_SIZE0 != 256
; 0000 00EE    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00EF #endif
; 0000 00F0    ++tx_counter0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00F1    }
; 0000 00F2 else
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00F3    UDR0=c;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00F4 #asm("sei")
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
	sei
;PCODE: $000000E4 VOL: 0
; 0000 00F5 }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// TWI functions
;#include <twi.h>
;
;void main(void)
; 0000 0100 {
;PCODE: $000000E8 VOL: 0
; 0000 0101 // Declare your local variables here
; 0000 0102 
; 0000 0103 // Crystal Oscillator division factor: 1
; 0000 0104 #pragma optsize-
; 0000 0105 CLKPR=(1<<CLKPCE);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0106 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0107 #ifdef _OPTIMIZE_SIZE_
; 0000 0108 #pragma optsize+
; 0000 0109 #endif
; 0000 010A 
; 0000 010B // Input/Output Ports initialization
; 0000 010C // Port B initialization
; 0000 010D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 010E DDRB=(0<<DDB7) | (1<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 010F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=P Bit0=P
; 0000 0110 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0111 
; 0000 0112 // Port C initialization
; 0000 0113 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0114 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0115 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0116 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0117 
; 0000 0118 // Port D initialization
; 0000 0119 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 011A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 011B // State: Bit7=P Bit6=T Bit5=T Bit4=P Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 011C PORTD=(1<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (1<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 011D 
; 0000 011E // Timer/Counter 0 initialization
; 0000 011F // Clock source: System Clock
; 0000 0120 // Clock value: Timer 0 Stopped
; 0000 0121 // Mode: Normal top=0xFF
; 0000 0122 // OC0A output: Disconnected
; 0000 0123 // OC0B output: Disconnected
; 0000 0124 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0125 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0126 TCNT0=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0127 OCR0A=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0128 OCR0B=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0129 
; 0000 012A // Timer/Counter 1 initialization
; 0000 012B // Clock source: System Clock
; 0000 012C // Clock value: Timer1 Stopped
; 0000 012D // Mode: Normal top=0xFFFF
; 0000 012E // OC1A output: Disconnected
; 0000 012F // OC1B output: Disconnected
; 0000 0130 // Noise Canceler: Off
; 0000 0131 // Input Capture on Falling Edge
; 0000 0132 // Timer1 Overflow Interrupt: Off
; 0000 0133 // Input Capture Interrupt: Off
; 0000 0134 // Compare A Match Interrupt: Off
; 0000 0135 // Compare B Match Interrupt: Off
; 0000 0136 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0137 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0138 TCNT1H=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0139 TCNT1L=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 013A ICR1H=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 013B ICR1L=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 013C OCR1AH=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 013D OCR1AL=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 013E OCR1BH=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 013F OCR1BL=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0140 
; 0000 0141 // Timer/Counter 2 initialization
; 0000 0142 // Clock source: System Clock
; 0000 0143 // Clock value: Timer2 Stopped
; 0000 0144 // Mode: Normal top=0xFF
; 0000 0145 // OC2A output: Disconnected
; 0000 0146 // OC2B output: Disconnected
; 0000 0147 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0148 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0149 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 014A TCNT2=0x00;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 014B OCR2A=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 014C OCR2B=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 014D 
; 0000 014E // Timer/Counter 0 Interrupt(s) initialization
; 0000 014F TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0150 
; 0000 0151 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0152 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0153 
; 0000 0154 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0155 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0156 
; 0000 0157 // External Interrupt(s) initialization
; 0000 0158 // INT0: Off
; 0000 0159 // INT1: Off
; 0000 015A // Interrupt on any change on pins PCINT0-7: Off
; 0000 015B // Interrupt on any change on pins PCINT8-14: Off
; 0000 015C // Interrupt on any change on pins PCINT16-23: Off
; 0000 015D EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 015E EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 015F PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0160 
; 0000 0161 // USART initialization
; 0000 0162 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0163 // USART Receiver: On
; 0000 0164 // USART Transmitter: On
; 0000 0165 // USART0 Mode: Asynchronous
; 0000 0166 // USART Baud Rate: 4800
; 0000 0167 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0168 UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0169 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 016A UBRR0H=0x00;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 016B UBRR0L=0x0C;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 016C 
; 0000 016D // Analog Comparator initialization
; 0000 016E // Analog Comparator: Off
; 0000 016F // The Analog Comparator's positive input is
; 0000 0170 // connected to the AIN0 pin
; 0000 0171 // The Analog Comparator's negative input is
; 0000 0172 // connected to the AIN1 pin
; 0000 0173 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0174 ADCSRB=(0<<ACME);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0175 // Digital input buffer on AIN0: On
; 0000 0176 // Digital input buffer on AIN1: On
; 0000 0177 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0178 
; 0000 0179 // ADC initialization
; 0000 017A // ADC disabled
; 0000 017B ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 017C 
; 0000 017D // SPI initialization
; 0000 017E // SPI disabled
; 0000 017F SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0180 
; 0000 0181 // TWI initialization
; 0000 0182 // Mode: TWI Master
; 0000 0183 // Bit Rate: 62 kHz
; 0000 0184 twi_master_init(62);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0185 
; 0000 0186 // Global enable interrupts
; 0000 0187 #asm("sei")
;PCODE: $00000146 VOL: 0
	sei
;PCODE: $00000147 VOL: 0
; 0000 0188 
; 0000 0189 while (1)
;PCODE: $00000148 VOL: 0
; 0000 018A       {
; 0000 018B       // Place your code here
; 0000 018C         if(!StartUp)
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 018D         {
; 0000 018E             // first start up
; 0000 018F 
; 0000 0190             // unreset
; 0000 0191             Mute=1;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0192             delay_ms(100);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0193             DAC_reset=1;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0194             delay_ms(100);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0195 
; 0000 0196             if(!_4493)
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0197             {
; 0000 0198                 // 4493 mode
; 0000 0199                 char i=0;
; 0000 019A                 for(i=0;i<22;i++)
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;	i -> Y+0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 019B                 {
; 0000 019C                     // write default values to dac
; 0000 019D                     dac_reg[i]=_4493_def_values[i];
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 019E                     Write_To_DAC(i2c_address,i,dac_reg[i]);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 019F                 }
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 01A0             }
;PCODE: $0000017B VOL: 0
; 0000 01A1             else
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 01A2             {
; 0000 01A3                 // 4490 mode
; 0000 01A4                 char i=0;
; 0000 01A5                 for(i=0;i<10;i++)
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;	i -> Y+0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 01A6                 {
; 0000 01A7                     // write default values to dac
; 0000 01A8                     dac_reg[i]=_4490_def_values[i];
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 01A9                     Write_To_DAC(i2c_address,i,dac_reg[i]);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 01AA                 }
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 01AB             }
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 01AC 
; 0000 01AD             delay_ms(100);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 01AE             StartUp=1;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 01AF             ResetChip();
;PCODE: $000001A8 VOL: 0
; 0000 01B0             Mute=0;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 01B1         }
; 0000 01B2         else
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 01B3         {
; 0000 01B4             // normal work
; 0000 01B5             unsigned char _SR=1*F0+2*F1+4*F2+8*F3; //calculate current mode
; 0000 01B6             unsigned char _DF=SSLOW*1+SD*2+SLOW*4;
; 0000 01B7 
; 0000 01B8             // Samplerate check
; 0000 01B9             if(_SR!=last_SR)
;PCODE: $000001AD VOL: 0
;	_SR -> Y+1
;	_DF -> Y+0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 01BA             {
; 0000 01BB                 Mute=1;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 01BC                 SampleRateCheck(_SR);
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 01BD                 last_SR=_SR;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 01BE                 if(!_4493)
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 01BF                 {
; 0000 01C0                     // strong check unsupported mode:
; 0000 01C1                     // AK4490 does not support DSD512 mode
; 0000 01C2                     if(_SR>11)
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 01C3                     {
; 0000 01C4                         Mute=1;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 01C5                     }
; 0000 01C6                     else
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 01C7                     {
; 0000 01C8                         Mute=0;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 01C9                     }
;PCODE: $000001E3 VOL: 0
; 0000 01CA                 }
; 0000 01CB                 else
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 01CC                 {
; 0000 01CD                     Mute=0;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 01CE                 }
;PCODE: $000001E8 VOL: 0
; 0000 01CF                 printf("Current mode: %i\n", _SR);
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 01D0             };
;PCODE: $000001F3 VOL: 0
; 0000 01D1 
; 0000 01D2 
; 0000 01D3             if(_DF!=last_DF)
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 01D4             {
; 0000 01D5                 Mute=1;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 01D6                 DF_Check();
;PCODE: $000001F9 VOL: 0
; 0000 01D7                 ResetChip();
;PCODE: $000001FA VOL: 0
; 0000 01D8                 Mute=0;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 01D9                 last_DF=_DF;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 01DA                 printf("Digital Filter: SLOW=%i, SD=%i, SSLOW=%i\n",SLOW,SD,SSLOW);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 01DB             }
; 0000 01DC         }
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 01DD       }
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 01DE }
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;
;void Write_To_DAC(unsigned char chip_address, unsigned char address, unsigned char data)
; 0000 01E1 {
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 01E2     struct _data
; 0000 01E3     {
; 0000 01E4         unsigned char msb;
; 0000 01E5         unsigned char lsb;
; 0000 01E6         unsigned char data;
; 0000 01E7     } DAC_REG;
; 0000 01E8     DAC_REG.msb=0x0;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;	chip_address -> Y+5
;	address -> Y+4
;	data -> Y+3
;	_data -> Y+3
;	DAC_REG -> Y+0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 01E9     DAC_REG.lsb=address;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 01EA     DAC_REG.data=data;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 01EB     twi_master_trans(chip_address,(unsigned char*)&DAC_REG,3,0,0);
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 01EC     delay_ms(50);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 01ED }
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;
;void SampleRateCheck(unsigned char mode)
; 0000 01F0 {
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 01F1     if(mode<9)
;PCODE: $00000236 VOL: 0
;	mode -> Y+0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 01F2     {
; 0000 01F3         // clear DP bit
; 0000 01F4         _clrbit(dac_reg[2],7);
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 01F5         Write_To_DAC(i2c_address,2,dac_reg[2]);
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 01F6         //pcm mode
; 0000 01F7         if(F0==1)
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 01F8         {
; 0000 01F9             // 44.1 kHz MCLK mode
; 0000 01FA             Scale_44=0;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 01FB             Scale_48=1;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 01FC         }
; 0000 01FD         else
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 01FE         {
; 0000 01FF             // 48 kHz MCLK Mode
; 0000 0200             Scale_44=1;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0201             Scale_48=0;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0202         };
;PCODE: $00000252 VOL: 0
; 0000 0203         ResetChip();
;PCODE: $00000253 VOL: 0
; 0000 0204     }
; 0000 0205     else
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0206     {
; 0000 0207         // dsd mode
; 0000 0208         if(Scale)
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 0209         {
; 0000 020A             // 44.1 kHz MCLK mode
; 0000 020B             Scale_44=0;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 020C             Scale_48=1;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 020D         }
; 0000 020E         else
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 020F         {
; 0000 0210             // 48 kHz MCLK Mode
; 0000 0211             Scale_44=1;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0212             Scale_48=0;
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0213         };
;PCODE: $00000263 VOL: 0
; 0000 0214 
; 0000 0215         // set DP bit
; 0000 0216         _setbit(dac_reg[2],7);
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0217 
; 0000 0218         switch(mode)
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 0219         {
; 0000 021A             case 9:
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 021B             {
; 0000 021C                 //DSD64 Mode
; 0000 021D                 // set DSD mode
; 0000 021E                 // DSDSEL0
; 0000 021F                 _clrbit(dac_reg[6],0);
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0220                 // DSDSEL1
; 0000 0221                 _clrbit(dac_reg[9],0);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0222                 // write to DAC
; 0000 0223             }
; 0000 0224             break;
;PCODE: $00000277 VOL: 0
; 0000 0225             case 10:
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0226             {
; 0000 0227                 //DSD128 Mode
; 0000 0228                 // set DSD mode
; 0000 0229                 // DSDSEL0
; 0000 022A                 _setbit(dac_reg[6],0);
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 022B                 // DSDSEL1
; 0000 022C                 _clrbit(dac_reg[9],0);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 022D                 // write to DAC
; 0000 022E             }
; 0000 022F             break;
;PCODE: $00000285 VOL: 0
; 0000 0230             case 11:
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0231             {
; 0000 0232                 //DSD256 Mode
; 0000 0233                 // set DP bit
; 0000 0234                 _setbit(dac_reg[2],7);
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 0235                 // set DSD mode
; 0000 0236                 // DSDSEL0
; 0000 0237                 _clrbit(dac_reg[6],0);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 0238                 // DSDSEL1
; 0000 0239                 _setbit(dac_reg[9],0);
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 023A                 // write to DAC
; 0000 023B             }
; 0000 023C             break;
;PCODE: $00000298 VOL: 0
; 0000 023D             case 12:
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 023E             {
; 0000 023F                 //DSD512 Mode
; 0000 0240                 // set DSD mode
; 0000 0241                 // DSDSEL0
; 0000 0242                 _setbit(dac_reg[6],0);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 0243                 // DSDSEL1
; 0000 0244                 _setbit(dac_reg[9],0);
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0245                 // write to DAC
; 0000 0246             }
; 0000 0247             break;
;PCODE: $000002A6 VOL: 0
; 0000 0248 
; 0000 0249         };
;PCODE: $000002A7 VOL: 0
; 0000 024A         Write_To_DAC(i2c_address,2,dac_reg[2]);
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 024B         Write_To_DAC(i2c_address,6,dac_reg[6]);
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 024C         Write_To_DAC(i2c_address,9,dac_reg[9]);
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 024D         ResetChip();
;PCODE: $000002BA VOL: 0
; 0000 024E     }
;PCODE: $000002BB VOL: 0
; 0000 024F }
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;
;void ResetChip()
; 0000 0252 {
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 0253     //reset chip
; 0000 0254     _clrbit(dac_reg[0],0);
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 0255     Write_To_DAC(i2c_address,0,dac_reg[0]);
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0256     delay_ms(10);
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 0257     _setbit(dac_reg[0],0);
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 0258     Write_To_DAC(i2c_address,0,dac_reg[0]);
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0259     delay_ms(10);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 025A }
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;
;void DF_Check()
; 0000 025D {
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 025E     if(SSLOW)
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 025F     {
; 0000 0260         _setbit(dac_reg[5],0);
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 0261     }
; 0000 0262     else
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 0263     {
; 0000 0264         _clrbit(dac_reg[5],0);
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0265     }
;PCODE: $000002EC VOL: 0
; 0000 0266 
; 0000 0267     if(SD)
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 0268     {
; 0000 0269         _setbit(dac_reg[1],5);
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 026A     }
; 0000 026B     else
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 026C     {
; 0000 026D         _clrbit(dac_reg[1],5);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 026E     }
;PCODE: $000002FC VOL: 0
; 0000 026F     if(SLOW)
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 0270     {
; 0000 0271         _setbit(dac_reg[2],0);
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 0272     }
; 0000 0273     else
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 0274     {
; 0000 0275         _clrbit(dac_reg[2],0);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 0276     }
;PCODE: $0000030C VOL: 0
; 0000 0277     Write_To_DAC(i2c_address,1,dac_reg[1]);
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0278     Write_To_DAC(i2c_address,2,dac_reg[2]);
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 0279     Write_To_DAC(i2c_address,5,dac_reg[5]);
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 027A     ResetChip();
;PCODE: $0000031F VOL: 0
; 0000 027B }
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
